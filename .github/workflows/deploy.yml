name: Build and Deploy Cloud Sentinel

on:
  push:
    branches:
      - master

jobs:
  build-and-push:
    name: Build & Push Images to ECR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Python dependencies
        run: |
          pip install -r dashboard/requirements.txt
          pip install pytest requests

      - name: Run Pytest for Dashboard
        run: |
          pytest dashboard/tests

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
            docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Build backup image
        run: |
          docker build -t backup-img -f backup/backup.Dockerfile .

      - name: Scan backup image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: backup-img

      - name: Build dashboard image
        run: |
          docker build -t dashboard-img -f dashboard/dashboard.Dockerfile .

      - name: Scan dashboard image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: dashboard-img

      - name: Tag & Push backup image
        run: |
          docker tag backup-img ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY_BACKUP }}:backup-latest
          docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY_BACKUP }}:backup-latest

      - name: Tag & Push dashboard image
        run: |
          docker tag dashboard-img ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY_DASHBOARD }}:dashboard-latest
          docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY_DASHBOARD }}:dashboard-latest

  deploy-dashboard:
    name: SSH Deploy Dashboard to EC2
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Decode EC2 SSH key
        run: |
          echo "$EC2_SSH_KEY" > private_key.pem
          chmod 600 private_key.pem
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            docker login -u AWS -p \$(aws ecr get-login-password --region ${{ secrets.AWS_REGION }}) ${{ secrets.ECR_REGISTRY }}
            docker pull ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY_DASHBOARD }}:dashboard-latest
            docker stop dashboard || true
            docker rm dashboard || true
            docker run -d --name dashboard -p 80:5000 ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY_DASHBOARD }}:dashboard-latest
          EOF

      - name: Health check after deploy
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            sleep 5
            STATUS_CODE=\$(curl -s -o /dev/null -w "%{http_code}" http://localhost/status)
            if [ "\$STATUS_CODE" -ne 200 ]; then
              echo "Health check failed! Status code: \$STATUS_CODE❌"
              exit 1
            fi
            echo "Health check passed!✅"
          EOF
